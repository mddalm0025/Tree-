/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        // Initialize result vector to store levels
        vector<vector<int>> result;
        
        // Edge case: if tree is empty, return empty result
        if (!root) return result;
        
        // Create a queue for BFS traversal
        queue<TreeNode*> q;
        // Start with root node
        q.push(root);
        
        // Continue until all levels are processed
        while (!q.empty()) {
            // Get number of nodes at current level
            int levelSize = q.size();
            // Temporary vector to store current level's values
            vector<int> currentLevel;
            
            // Process all nodes at current level
            for (int i = 0; i < levelSize; ++i) {
                // Get front node from queue
                TreeNode* node = q.front();
                q.pop();
                
                // Add node's value to current level
                currentLevel.push_back(node->val);
                
                // Enqueue left child if exists (for next level)
                if (node->left) q.push(node->left);
                // Enqueue right child if exists (for next level)
                if (node->right) q.push(node->right);
            }
            
            // Add current level's values to final result
            result.push_back(currentLevel);
        }
        
        // Return final level-order traversal
        return result;
    }
};
