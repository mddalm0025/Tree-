vector<int> postorderTraversal(TreeNode* root) {
    vector<int> result;
    TreeNode dummy(0);
    dummy.left = root;
    TreeNode* curr = &dummy;
    
    while (curr != nullptr) {
        if (curr->left == nullptr) {
            curr = curr->right;
        } else {
            TreeNode* predecessor = curr->left;
            while (predecessor->right != nullptr && predecessor->right != curr) {
                predecessor = predecessor->right;
            }
            
            if (predecessor->right == nullptr) {
                predecessor->right = curr;
                curr = curr->left;
            } else {
                // Reverse the right references in left subtree
                TreeNode* node = curr->left;
                vector<int> temp;
                while (node != predecessor) {
                    temp.push_back(node->val);
                    TreeNode* next = node->right;
                    node->right = predecessor;
                    node = next;
                }
                temp.push_back(node->val);
                
                // Reverse the temp vector to get postorder
                reverse(temp.begin(), temp.end());
                result.insert(result.end(), temp.begin(), temp.end());
                
                // Restore the tree structure
                predecessor->right = nullptr;
                curr = curr->right;
            }
        }
    }
    return result;
}
